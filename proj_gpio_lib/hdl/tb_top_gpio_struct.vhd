-- VHDL Entity proj_gpio_lib.tb_top_gpio.symbol
--
-- Created:
--          by - net.UNKNOWN (KPERSM7467)
--          at - 16:11:11 18.12.2017
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2016.2 (Build 5)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

entity tb_top_gpio is
-- Declarations

end tb_top_gpio ;

--
-- VHDL Architecture proj_gpio_lib.tb_top_gpio.struct
--
-- Created:
--          by - Net.UNKNOWN (KPERSM7467)
--          at - 20:43:28 28.12.2017
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2016.2 (Build 5)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
use work.busdef.all;

library proj_gpio_lib;

architecture struct of tb_top_gpio is

   -- Architecture declarations

   -- Internal signal declarations
   signal bus_addr       : std_logic_vector( 15 downto 0 );
   signal bus_dout       : std_logic_vector( 31 downto 0 );
   signal bus_rd         : std_logic;
   signal bus_we         : std_logic;
   signal buttons        : std_logic_vector(3 downto 0);
   signal clk            : std_logic;
   signal encoder0       : std_logic_vector(1 downto 0);
   signal encoder1       : std_logic_vector(1 downto 0);
   signal reset          : std_logic;
   signal sbus_ack       : std_logic;
   signal sbus_ack1      : std_logic;
   signal sbus_addr_mst  : std_logic_vector(15 downto 0);
   signal sbus_i         : sbus_i_t;
   signal sbus_i_null    : sbus_i_t;
   signal sbus_o_a       : sbus_o_t;
   signal sbus_rd_mst    : std_logic;
   signal sbus_rdata     : std_logic_vector(31 downto 0);
   signal sbus_rdata_mst : std_logic_vector(31 downto 0);
   signal sbus_wdata_mst : std_logic_vector(31 downto 0);
   signal sbus_we_mst    : std_logic;
   signal sliders        : std_logic_vector(3 downto 0);
   signal stimuli        : std_logic_vector(3 downto 0);


   -- Component Declarations
   component bhv_zybo_tester3
   generic (
      commands_g           : string  := "commands.txt";
      clk_period_g         : time    := 8 ns;
      strobe0_clk_cycles_g : integer := 10;
      strobe1_clk_cycles_g : integer := 10;
      reset_clk_cycles_g   : integer := 10
   );
   port (
      buttons  : out    std_logic_vector (3 downto 0);
      clk      : out    std_logic ;
      reset    : out    std_logic ;
      strobe0  : out    std_logic ;
      strobe1  : out    std_logic ;
      stimuli  : out    std_logic_vector (3 downto 0);
      encoder0 : out    std_logic_vector (1 downto 0);
      encoder1 : out    std_logic_vector (1 downto 0);
      sliders  : out    std_logic_vector (3 downto 0)
   );
   end component;
   component buscmd_b
   generic (
      COMMANDS : string  := "buscommands.txt";
      AWIDTH   : integer := 32;              -- 
      DWIDTH   : integer := 32               -- 
   );
   port (
      bus_addr : out    std_logic_vector ( AWIDTH-1 downto 0 );
      bus_we   : out    std_logic ;
      bus_dout : out    std_logic_vector ( DWIDTH-1 downto 0 );
      bus_rd   : out    std_logic ;
      bus_din  : in     std_logic_vector ( DWIDTH-1 downto 0 );
      clk      : in     std_logic ;
      reset    : in     std_logic ;
      bus_ack  : in     std_logic ;
      eof      : out    std_logic 
   );
   end component;
   component dpram_fileio
   generic (
      simulation_g    : boolean := false;
      hex_format_g    : boolean := true;
      save_filename_g : string  := "dpram32_dump.txt";
      load_filename_g : string  := "dpram32_dump.txt";
      addr_base_a_g   : std_logic_vector;
      addr_base_b_g   : std_logic_vector;
      addr_range_g    : std_logic_vector;
      addr_width_g    : integer := 8;                --width of address
      data_width_g    : integer := 32                --width of data
   );
   port (
      clka      : in     std_logic ;
      save2file : in     std_logic ;
      load2mem  : in     std_logic ;
      sbus_i_a  : in     sbus_i_t ;
      sbus_i_b  : in     sbus_i_t ;
      sbus_o_a  : out    sbus_o_t ;
      sbus_o_b  : out    sbus_o_t 
   );
   end component;
   component sbus_termination
   port (
      sbus_i_null : out    sbus_i_t;
      sbus_o_null : out    sbus_o_t
   );
   end component;
   component to_sbus
   port (
      sbus_ack   : out    std_logic ;
      sbus_rd    : in     std_logic ;
      sbus_we    : in     std_logic ;
      sbus_addr  : in     std_logic_vector (15 downto 0);
      sbus_i     : out    sbus_i_t ;
      sbus_o     : in     sbus_o_t ;
      sbus_rdata : out    std_logic_vector (31 downto 0);
      sbus_wdata : in     std_logic_vector (31 downto 0)
   );
   end component;
   component top_gpio
   generic (
      simulation_g      : boolean          := false;
      C_SLV_ADDR_BASE   : std_logic_vector := X"0000";
      C_SLV_ADDR_RANGE  : std_logic_vector := X"0010";
      C_CORE_CLOCK_FREQ : integer          := 100000000
   );
   port (
      buttons        : in     std_logic_vector (3 downto 0);
      -- Users to add ports here
      clk            : in     std_logic ;
      encoder0       : in     std_logic_vector (1 downto 0);
      encoder1       : in     std_logic_vector (1 downto 0);
      reset          : in     std_logic ;
      sbus_ack_mst   : in     std_logic ;
      sbus_addr      : in     std_logic_vector (15 downto 0);
      sbus_rd        : in     std_logic ;
      sbus_rdata_mst : in     std_logic_vector (31 downto 0);
      sbus_wdata     : in     std_logic_vector (31 downto 0);
      sbus_we        : in     std_logic ;
      sliders        : in     std_logic_vector (3 downto 0);
      buzzer         : out    std_logic_vector (1 downto 0);
      irq_o          : out    std_logic ;
      leds           : out    std_logic_vector (3 downto 0);
      sbus_ack       : out    std_logic ;
      sbus_addr_mst  : out    std_logic_vector (15 downto 0);
      sbus_rd_mst    : out    std_logic ;
      sbus_rdata     : out    std_logic_vector (31 downto 0);
      sbus_wdata_mst : out    std_logic_vector (31 downto 0);
      sbus_we_mst    : out    std_logic 
   );
   end component;

   -- Optional embedded configurations
   -- pragma synthesis_off
   for all : bhv_zybo_tester3 use entity proj_gpio_lib.bhv_zybo_tester3;
   for all : buscmd_b use entity proj_gpio_lib.buscmd_b;
   for all : dpram_fileio use entity proj_gpio_lib.dpram_fileio;
   for all : sbus_termination use entity proj_gpio_lib.sbus_termination;
   for all : to_sbus use entity proj_gpio_lib.to_sbus;
   for all : top_gpio use entity proj_gpio_lib.top_gpio;
   -- pragma synthesis_on


begin

   -- Instance port mappings.
   U_0 : bhv_zybo_tester3
      generic map (
         commands_g           => "commands.txt",
         clk_period_g         => 8 ns,
         strobe0_clk_cycles_g => 10,
         strobe1_clk_cycles_g => 10,
         reset_clk_cycles_g   => 10
      )
      port map (
         buttons  => buttons,
         clk      => clk,
         reset    => reset,
         strobe0  => open,
         strobe1  => open,
         stimuli  => stimuli,
         encoder0 => encoder0,
         encoder1 => encoder1,
         sliders  => sliders
      );
   U_1 : buscmd_b
      generic map (
         COMMANDS => "buscommands.txt",
         AWIDTH   => 16,              -- 
         DWIDTH   => 32               -- 
      )
      port map (
         bus_addr => bus_addr,
         bus_we   => bus_we,
         bus_dout => bus_dout,
         bus_rd   => bus_rd,
         bus_din  => sbus_rdata,
         clk      => clk,
         reset    => reset,
         bus_ack  => sbus_ack,
         eof      => open
      );
   U_3 : dpram_fileio
      generic map (
         simulation_g    => true,
         hex_format_g    => true,
         save_filename_g => "dpram32_dump.txt",
         load_filename_g => "dpram32_image.txt",
         addr_base_a_g   => X"4000",
         addr_base_b_g   => X"0000",
         addr_range_g    => X"0100",
         addr_width_g    => 8,                 --width of address
         data_width_g    => 32                 --width of data
      )
      port map (
         clka      => clk,
         save2file => stimuli(1),
         load2mem  => stimuli(0),
         sbus_i_a  => sbus_i,
         sbus_i_b  => sbus_i_null,
         sbus_o_a  => sbus_o_a,
         sbus_o_b  => open
      );
   U_5 : sbus_termination
      port map (
         sbus_o_null => open,
         sbus_i_null => sbus_i_null
      );
   U_4 : to_sbus
      port map (
         sbus_ack   => sbus_ack1,
         sbus_rd    => sbus_rd_mst,
         sbus_we    => sbus_we_mst,
         sbus_addr  => sbus_addr_mst,
         sbus_i     => sbus_i,
         sbus_o     => sbus_o_a,
         sbus_rdata => sbus_rdata_mst,
         sbus_wdata => sbus_wdata_mst
      );
   U_2 : top_gpio
      generic map (
         simulation_g      => true,
         C_SLV_ADDR_BASE   => X"2000",
         C_SLV_ADDR_RANGE  => X"0010",
         C_CORE_CLOCK_FREQ => 100000000
      )
      port map (
         buttons        => buttons,
         clk            => clk,
         encoder0       => encoder0,
         encoder1       => encoder1,
         reset          => reset,
         sbus_ack_mst   => sbus_ack1,
         sbus_addr      => bus_addr,
         sbus_rd        => bus_rd,
         sbus_rdata_mst => sbus_rdata_mst,
         sbus_wdata     => bus_dout,
         sbus_we        => bus_we,
         sliders        => sliders,
         buzzer         => open,
         irq_o          => open,
         leds           => open,
         sbus_ack       => sbus_ack,
         sbus_addr_mst  => sbus_addr_mst,
         sbus_rd_mst    => sbus_rd_mst,
         sbus_rdata     => sbus_rdata,
         sbus_wdata_mst => sbus_wdata_mst,
         sbus_we_mst    => sbus_we_mst
      );

end struct;
