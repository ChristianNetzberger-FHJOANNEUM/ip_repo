--
-- VHDL Architecture training_lib.comp_strobetrain_g.rtl
--
-- Created:
--          by - Net.UNKNOWN (KPERSM7467)
--          at - 14:52:11 29.10.2017
--
-- using Mentor Graphics HDL Designer(TM) 2016.2 (Build 5)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity comp_strobetrain_g is
   generic( 
      nbits_g         : integer := 16;
      period_length_g : integer := 1;
      pulse_number_g  : integer := 1
   );
   port( 
      trigger_i   : in     std_logic;
      enable_i    : in     std_logic;
      reset       : in     std_logic;
      clk         : in     std_logic;
      enable_o    : out    std_logic;
      trigger_o   : out    std_logic;
      laststrobe  : out    std_logic;
      strobetrain : out    std_logic
   );

-- Declarations

end comp_strobetrain_g ;

--
architecture rtl of comp_strobetrain_g is
  signal cnt_period, cnt_number: std_logic_vector(nbits_g-1 downto 0);
  signal strobetrain_en, cnt_period_tc: std_logic;
  signal trigger_reg: std_logic;
begin
  
  --counter to create the pulse period-------
  process(clk)
  begin
    if rising_edge(clk) then
      if reset = '1' then
        cnt_period <= (0 => '1',others => '0'); -- start counting from 1, set element 0 of vector to '1'
      elsif strobetrain_en = '1' then -- enable counter while pulse number counter's terminal count is zero 
        if enable_i = '1' then
          if cnt_period_tc = '1' then
            cnt_period <= (0 => '1', others => '0');-- wrap back to 1
          else
            cnt_period <= cnt_period +1;
          end if;
        end if;
      end if;
    end if;
  end process;
  --comparator to create the terminal count of the period counter--
  cnt_period_tc <= '1' when cnt_period = period_length_g else '0';
  
  --down-counter to implement the number of pulses----
  process(clk)
  begin
    if rising_edge(clk) then
      if reset = '1' then
        cnt_number <= (others => '0'); 
      elsif enable_i = '1' then
        if trigger_reg = '1' then
           cnt_number <= conv_std_logic_vector(pulse_number_g, cnt_number'length);      ---load the counter with initial value
        end if;
        if strobetrain_en = '1' then
          if cnt_period_tc = '1' then
            cnt_number <= cnt_number -1; --decrement until counter reaches zero
          end if;
        end if;
      end if;
    end if;
  end process;
  
  ---comparator to determine terminal count for the pulsenumber counter
  strobetrain_en <= '0' when cnt_number = 0 else '1';
 

  process(clk)
  begin
    if rising_edge(clk) then
      if reset = '1' then
        trigger_reg <= '0'; 
      elsif trigger_i = '1' and strobetrain_en = '0' then
        trigger_reg <= '1'; --register the trigger_i strobe
      elsif enable_i = '1' then
        trigger_reg <= '0'; --reset the registered trigger_i strobe
      end if;
    end if;
  end process;
  
  --register output signals : introduces one clock cycle delay !!!
  process(clk)
  begin
    if rising_edge(clk) then
      trigger_o <= enable_i and trigger_reg;
      enable_o  <= enable_i;
  -- output signal
      strobetrain <= (cnt_period_tc and enable_i and strobetrain_en) or (enable_i and trigger_reg);
      laststrobe <= '0';
      if cnt_number = 1 then
         laststrobe <= cnt_period_tc and enable_i and strobetrain_en;
      end if;
    end if;
  end process;
end architecture rtl;

